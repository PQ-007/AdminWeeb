import {
  require_react
} from "./chunk-VYDTUJYP.js";
import {
  __toESM
} from "./chunk-H3AJBOWU.js";

// node_modules/@umijs/use-params/es/index.js
var import_react = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function setQueryToCurrentUrl(params) {
  var _a;
  var URL = (typeof window !== "undefined" ? window : {}).URL;
  var url = new URL((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href);
  Object.keys(params).forEach(function(key) {
    var value = params[key];
    if (value !== null && value !== void 0) {
      if (Array.isArray(value)) {
        url.searchParams.delete(key);
        value.forEach(function(valueItem) {
          url.searchParams.append(key, valueItem);
        });
      } else if (value instanceof Date) {
        if (!Number.isNaN(value.getTime())) {
          url.searchParams.set(key, value.toISOString());
        }
      } else if (typeof value === "object") {
        url.searchParams.set(key, JSON.stringify(value));
      } else {
        url.searchParams.set(key, value);
      }
    } else {
      url.searchParams.delete(key);
    }
  });
  return url;
}
function useUrlSearchParams(initial, config) {
  var _a;
  if (initial === void 0) {
    initial = {};
  }
  if (config === void 0) {
    config = { disabled: false };
  }
  var _b = (0, import_react.useState)(), forceUpdate = _b[1];
  var locationSearch = typeof window !== "undefined" && ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.search);
  var urlSearchParams = (0, import_react.useMemo)(function() {
    if (config.disabled)
      return {};
    return new URLSearchParams(locationSearch || {});
  }, [config.disabled, locationSearch]);
  var params = (0, import_react.useMemo)(function() {
    if (config.disabled)
      return {};
    if (typeof window === "undefined" || !window.URL)
      return {};
    var result = [];
    urlSearchParams.forEach(function(value, key) {
      result.push({
        key,
        value
      });
    });
    result = result.reduce(function(acc, val) {
      (acc[val.key] = acc[val.key] || []).push(val);
      return acc;
    }, {});
    result = Object.keys(result).map(function(key) {
      var valueGroup = result[key];
      if (valueGroup.length === 1) {
        return [key, valueGroup[0].value];
      }
      return [key, valueGroup.map(function(_a2) {
        var value = _a2.value;
        return value;
      })];
    });
    var newParams = __assign({}, initial);
    result.forEach(function(_a2) {
      var key = _a2[0], value = _a2[1];
      newParams[key] = parseValue(key, value, {}, initial);
    });
    return newParams;
  }, [config.disabled, initial, urlSearchParams]);
  function redirectToNewSearchParams(newParams) {
    if (typeof window === "undefined" || !window.URL)
      return;
    var url = setQueryToCurrentUrl(newParams);
    if (window.location.search !== url.search) {
      window.history.replaceState({}, "", url.toString());
    }
    if (urlSearchParams.toString() !== url.searchParams.toString()) {
      forceUpdate({});
    }
  }
  (0, import_react.useEffect)(function() {
    if (config.disabled)
      return;
    if (typeof window === "undefined" || !window.URL)
      return;
    redirectToNewSearchParams(__assign(__assign({}, initial), params));
  }, [config.disabled, params]);
  var setParams = function(newParams) {
    redirectToNewSearchParams(newParams);
  };
  (0, import_react.useEffect)(function() {
    if (config.disabled)
      return function() {
      };
    if (typeof window === "undefined" || !window.URL)
      return function() {
      };
    var onPopState = function() {
      forceUpdate({});
    };
    window.addEventListener("popstate", onPopState);
    return function() {
      window.removeEventListener("popstate", onPopState);
    };
  }, [config.disabled]);
  return [params, setParams];
}
var booleanValues = {
  true: true,
  false: false
};
function parseValue(key, _value, types, defaultParams) {
  if (!types)
    return _value;
  var type = types[key];
  var value = _value === void 0 ? defaultParams[key] : _value;
  if (type === Number) {
    return Number(value);
  }
  if (type === Boolean || _value === "true" || _value === "false") {
    return booleanValues[value];
  }
  if (Array.isArray(type)) {
    return type.find(function(item) {
      return item == value;
    }) || defaultParams[key];
  }
  return value;
}

// node_modules/omit.js/es/index.js
function omit(obj, fields) {
  var shallowCopy = Object.assign({}, obj);
  for (var i = 0; i < fields.length; i += 1) {
    var key = fields[i];
    delete shallowCopy[key];
  }
  return shallowCopy;
}
var es_default = omit;

export {
  useUrlSearchParams,
  es_default
};
//# sourceMappingURL=chunk-PISKCGCZ.js.map
